<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/18/hello-world/"/>
    <url>/2020/12/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>fucker mother</p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>my-first-blog</title>
    <link href="/2020/12/18/my-first-blog/"/>
    <url>/2020/12/18/my-first-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><h2 id="高内聚-低耦合"><a href="#高内聚-低耦合" class="headerlink" title="高内聚 低耦合"></a>高内聚 低耦合</h2><h3 id="程序间的耦合"><a href="#程序间的耦合" class="headerlink" title="程序间的耦合"></a>程序间的耦合</h3><p>耦合指的是模块与模块之间的依赖关系，耦合度越高，则表明模块的独立性差，且维护成本高。</p><h4 id="耦合例子"><a href="#耦合例子" class="headerlink" title="耦合例子"></a>耦合例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;用户添加成功.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br><br>        userService.addUser();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>直接new实体类当实体类名发生改变时，代码将会进行修改两次</p><p>这时候就需要接口 使用接口实现调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;用户添加成功.&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br><br>        userService.addUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时实现依次解耦合 当类名发生改变时不需要关心实现类做了什么操作，而接口与实现类之间有一种规范了标准 这时，如果类名发生改变只用修改一次代码</p><p>使用工厂方法解耦</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;用户添加成功.&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserFacory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserService <span class="hljs-title">getUserService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserServiceImpl();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        UserService userService = UserFacory.getUserService();<br>        userService.addUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当类发生改变时 只用修改工厂方法 不用修改其他 再次解耦</p><h2 id="Spring-IOC-原理"><a href="#Spring-IOC-原理" class="headerlink" title="Spring IOC 原理"></a>Spring IOC 原理</h2><p>使用SAXReader读取bean.xml 中的类名 和 类id</p><p>使用反射创建对象</p><p>保存到map中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        SAXReader saxReader = <span class="hljs-keyword">new</span> SAXReader();<br>        Document document = <span class="hljs-keyword">null</span>;<br>        document = saxReader.read(BeanFactory.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;beans.xml&quot;</span>));<br>        Element rootElement = document.getRootElement();<br><br>        List beansElements = rootElement.elements();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; beansElements.size(); i++) &#123;<br>            Element element = (Element) beansElements.get(i);<br>            String idValue = element.attributeValue(<span class="hljs-string">&quot;id&quot;</span>);<br>            String classValue = element.attributeValue(<span class="hljs-string">&quot;class&quot;</span>);<br><br>            Class clazz = Class.forName(classValue);<br>            Object obj = clazz.getDeclaredConstructor().newInstance();<br>            beanMap.put(idValue, obj);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getBean</span><span class="hljs-params">(String key)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> beanMap.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ioc-入门"><a href="#ioc-入门" class="headerlink" title="ioc 入门"></a>ioc 入门</h2><p>导入maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写spring bean xml文件 id为bean的唯一标识符 class为创建对象的全限定名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.spring.study.dao.UserDAO&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.spring.study.service.impl.UserServiceImpl&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ApplicationContext为ioc容器接口 ClassPathXmlApplicationContext 根据xml获取bean</p><p>使用getBean方法获取bean 参数为bean中配置的唯一id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>UserService userService = (UserService) applicationContext.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>userService.addUser();<br></code></pre></td></tr></table></figure><h2 id="ioc细节"><a href="#ioc细节" class="headerlink" title="ioc细节"></a>ioc细节</h2><p>FileSystemXmlApplicationContext: 默认是去项目路径下去找文件</p><p>ClassPathXmlApplicationContext : 默认去classpath目录去找文件</p><p>AnnotationConfigApplicationContext: 基于注解配置实现类</p><h3 id="BeanFactory-和-ApplicationContext-的区别"><a href="#BeanFactory-和-ApplicationContext-的区别" class="headerlink" title="BeanFactory 和 ApplicationContext 的区别"></a>BeanFactory 和 ApplicationContext 的区别</h3><p>BeanFactory 是 ApplicationContext 顶层实现类</p><p>BeanFactory 被称为基础容器</p><p>ApplicationContext  被称为高级容器</p><p>ApplicationContext  比 BeanFactory  多了许多功能 一般使用ApplicationContext</p><p>applicationContext 读取配置文件时创建对象</p><p>beanFactory 什么时候使用 什么时候创建对象</p><h3 id="getBean"><a href="#getBean" class="headerlink" title="getBean"></a>getBean</h3><p>可以根据id获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">UserService userService =(UserService)applicationContext.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br></code></pre></td></tr></table></figure><p>可以根据字节码获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">UserService userService = (UserService)applicationContext.getBean(UserService.class);<br></code></pre></td></tr></table></figure><p>根据id和字节码获取bean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs j'a'v">UserService userService &#x3D; (UserService)applicationContext.getBean(&quot;userService&quot;, UserService.class);<br></code></pre></td></tr></table></figure><h3 id="bean标签"><a href="#bean标签" class="headerlink" title="bean标签"></a>bean标签</h3><p>默认调用无参构造器 调用不成功构造失败</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>id: bean唯一表示</p><p>class: 类的全限定名</p><p>scope: 多例 prototype singleton: 单例(默认) request 一个请求一个bean</p><p>session: 一个session一个bean</p><p>init-method: 类初始化调用的方法</p><p>destroy-method: 类被摧毁时调用的方法</p><h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><p>单例模式:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">对象出生</span>: <span class="hljs-string">容器创建时</span><br><span class="hljs-meta">对象活着</span>: <span class="hljs-string">只要一直容器存在 对象一直存在</span><br><span class="hljs-meta">对象死亡</span>: <span class="hljs-string">当容器被关闭时 对象被摧毁</span><br></code></pre></td></tr></table></figure><p>多例模式:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">对象出生</span>: <span class="hljs-string">调用对象时</span><br><span class="hljs-meta">对象活着</span>: <span class="hljs-string">只要对象被使用 就一直存在</span><br><span class="hljs-meta">对象死亡</span>: <span class="hljs-string">对象长时间不用 被垃圾回收机制回收</span><br></code></pre></td></tr></table></figure><h2 id="实例化bean的三种方式"><a href="#实例化bean的三种方式" class="headerlink" title="实例化bean的三种方式"></a>实例化bean的三种方式</h2><h3 id="使用默认无参构造器"><a href="#使用默认无参构造器" class="headerlink" title="使用默认无参构造器"></a>使用默认无参构造器</h3><p>如果没有无参构造器 bean创建失败</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.spring.study.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroy&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="静态工厂方法创建bean"><a href="#静态工厂方法创建bean" class="headerlink" title="静态工厂方法创建bean"></a>静态工厂方法创建bean</h3><p>创建一个静态工厂方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServiceFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserService <span class="hljs-title">createUserService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserServiceImpl();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在xml中配置bean class为工厂方法类的全限定名 factory-method为工厂方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userFactoryBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.spring.study.factory.ServiceFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createUserService&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用spring管理工厂方法在使用工厂方法获取bean"><a href="#使用spring管理工厂方法在使用工厂方法获取bean" class="headerlink" title="使用spring管理工厂方法在使用工厂方法获取bean"></a>使用spring管理工厂方法在使用工厂方法获取bean</h3><p>创建工厂方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServiceFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserService <span class="hljs-title">createUserService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserServiceImpl();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>装载bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;instanceFacotyUser&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.spring.study.factory.ServiceFactory&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServiceFactory&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;instanceFacotyUser&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createUserService&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ClassPathXmlApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br><br>UserService userService = (UserService) applicationContext.getBean(<span class="hljs-string">&quot;userServiceFactory&quot;</span>);<br><br>userService.addUser();<br></code></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>通过spring 给Bean赋值 是ioc的具体实现</p><h3 id="根据构造方法注入"><a href="#根据构造方法注入" class="headerlink" title="根据构造方法注入"></a>根据构造方法注入</h3><p>首先得有构造方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> UserServiceImpl(UserDAO userDAO, String name, Integer age, Date date, String lastName) &#123;<br>    <span class="hljs-keyword">this</span>.userDAO = userDAO;<br>    <span class="hljs-keyword">this</span>.name = name;<br>    <span class="hljs-keyword">this</span>.age = age;<br>    <span class="hljs-keyword">this</span>.date = date;<br>    <span class="hljs-keyword">this</span>.lastName = lastName;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>: <span class="hljs-string">根据构造方法的名称赋值(最常用)</span><br><span class="hljs-attr">index</span>: <span class="hljs-string">根据构造方法的索引为止赋值</span><br><span class="hljs-attr">type</span>: <span class="hljs-string">根据类型赋值 类型赋值有先后顺序</span><br><br><span class="hljs-attr">value</span>: <span class="hljs-string">注入值</span><br><span class="hljs-attr">ref</span>: <span class="hljs-string">引用bean注入</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.spring.study.service.impl.UserServiceImpl&quot;</span> &gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 根据构造方法的名称赋值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jack&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDAO&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;rose&quot;</span> /&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 根据构造方法的类型赋值 --&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;fucker&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;jack&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg type=&quot;java.lang.Integer&quot; value=&quot;20&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg type=&quot;java.util.Date&quot; ref=&quot;date&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg type=&quot;com.spring.study.dao.UserDAO&quot; ref=&quot;userDao&quot; /&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 根据构造方法的索引位置赋值 --&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg index=&quot;0&quot; ref=&quot;userDao&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg index=&quot;1&quot; value=&quot;jack&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg index=&quot;2&quot; value=&quot;20&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg index=&quot;3&quot; ref=&quot;date&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg index=&quot;4&quot; value=&quot;rose&quot; /&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h3><p>使用property属性注入</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>: <span class="hljs-string">set方法参数名称</span><br><span class="hljs-attr">value</span>: <span class="hljs-string">注入值</span><br><span class="hljs-attr">ref</span>: <span class="hljs-string">引用bean注入</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDAO</span><span class="hljs-params">(UserDAO userDAO)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.userDAO = userDAO;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDate</span><span class="hljs-params">(Date date)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.date = date;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLastName</span><span class="hljs-params">(String lastName)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.lastName = lastName;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>    userDAO.userSave();<br>&#125;<br></code></pre></td></tr></table></figure><p>bean.xml注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.spring.study.service.impl.UserServiceImpl&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jack&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;da&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDAO&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="注入集合"><a href="#注入集合" class="headerlink" title="注入集合"></a>注入集合</h3><p>在bean中之间写值或使用<ref bean=""> 引用即可</p><p>bean.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.spring.study.service.impl.UserServiceImpl&quot;</span> &gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;arr&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>word<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>wo3rd<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>w1ord<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;str&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>strla&quot;&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;world&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;world&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;world&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;jdbc&quot;</span>&gt;</span>mysqk<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;spring&quot;</span>&gt;</span>boot<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="mybatis-整合"><a href="#mybatis-整合" class="headerlink" title="mybatis 整合"></a>mybatis 整合</h2><ul><li>配置数据源</li><li>配置sqlSessionFactory</li><li>配置mapperScannerConfigurer</li><li>将mapper注入到service中 再由service调用mapper</li></ul><p>配置数据源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://192.168.223.130:3306/mybatis?characterEncoding=utf8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;52701314&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置sqlSessionFactory mapperLocations为mapper.xml所在位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mapper/*.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置mapperScannerConfigurer basePackage表示mapper所在包名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mapperScannerConfigurer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.study.dao&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将bean注入到service中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.study.service.impl.AccountServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accountMapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;accountMapper&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>使用ApplicationCotext获取Service并调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br>AccountService accountService = applicationContext.getBean(AccountService.class);<br>Account account = accountService.queryAccountByUsername(<span class="hljs-string">&quot;rose&quot;</span>);<br><br>account.setName(<span class="hljs-string">&quot;lk&quot;</span>);<br><br>System.out.println(account);<br><br>accountService.updateAccount(account);<br></code></pre></td></tr></table></figure><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul><li><p>component</p><ul><li>参数为bean id 如果不写 驼峰命名</li></ul></li><li><p>@Controller,@Service,@Repository 用法和component一样 分别代表控制层 业务层 dao</p></li><li><p>scope</p><ul><li>singleton 单例 property 多例</li></ul></li><li><p>在方法上使用</p><ul><li>PostConstruct 在构造方法调用后调用此方法</li><li>PreDestroy 在对象销毁前调用此方法</li></ul></li></ul><p>xml 配置</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">&lt;<span class="hljs-keyword">context</span>:<span class="hljs-keyword">component</span>-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>扫描包中带有 component  @Controller,@Service,@Repository  的注解 并添加到ioc容器中</p><p>开启注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="依赖注入注解"><a href="#依赖注入注解" class="headerlink" title="依赖注入注解"></a>依赖注入注解</h3><ul><li><p>Autowired</p><ul><li>根据被被注解的成员变量的类型 自动注入bean</li></ul></li><li><p>Qualifer</p><ul><li><p>根据id注入 必须和Autowired 注解一起使用</p></li><li><pre><code class="java">    @Autowired    @Qualifier(&quot;userDAO&quot;)    private UserDAOI user;<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>+ import<br><br>  + 导入其他配置文件<br><br>+ configuration<br><br>  + 替代bean.xml 纯注解配置文件<br><br>+ bean<br><br>  + 配置一个Bean<br><br>+ ComponentScan<br><br>  + 替代<span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">“”</span> /&gt;</span><br><br>## 整合junit<br><br>都如spring-test maven包<br><br>```xml<br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>使用SpringJUnitConfig注解查找spring配置文件</code></pre></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImplTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@org</span>.junit.jupiter.api.Test<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br><br><br>        userService.addUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试时， 注入configuration时不要使用ContextConfiguration注解，这个注解是junit4的注解，会导致configuration无法注入， 直接使用SpringJUnitConfig(classes = {SpringConfig.class})</strong></p><h2 id="Connection对象一致性问题解决"><a href="#Connection对象一致性问题解决" class="headerlink" title="Connection对象一致性问题解决"></a>Connection对象一致性问题解决</h2><p>connection对象不一致无法提交事物</p><p>这时候就需要TransactionSynchronizationManager.initSynchronization() 方法来启动事物同步</p><p>使用DataSourceUtils.getConnection() 方法获取一致对象</p><p>getConnection() 方法实现了LocalThread  绑定connection 解决connection对象一致性的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Connection <span class="hljs-title">connection</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> DataSource dataSource)</span> </span>&#123;<br>    TransactionSynchronizationManager.initSynchronization();<br><br>    <span class="hljs-keyword">return</span> DataSourceUtils.getConnection(dataSource);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="aop"><a href="#aop" class="headerlink" title="aop"></a>aop</h2><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h4><ul><li><p>Proxy.newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</p><ul><li><p>参数一: 被代理对象的类加载器</p><p>参数二: 被代理对象的所有接口</p><p>参数三: 具体如何增强原有方法</p></li></ul></li><li><p>InvocationHeadler实现类</p><ul><li>Object invoke(Object o, Method method, Object[] objects) throws Throwable<ul><li>参数一:  被创建出来的动态代理对象的引用</li><li>参数二: 被代理对象所执行的方法</li><li>参数三: 被代理对象执行方法的参数列表</li></ul></li><li>method.invoke(Object obj, Object… args) 调用原有方 法<ul><li>参数一: 被代理对象的原有方法</li><li>参数二: 被代理对象的参数列表</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> AccountService <span class="hljs-title">createAccountServiceProxy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">return</span> (AccountService) Proxy.newProxyInstance(accountService.getClass().getClassLoader(),<br>            accountService.getClass().getInterfaces(),<br>            <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object o, Method method, Object[] objects)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                    Object invoke = <span class="hljs-keyword">null</span>;<br>                    <span class="hljs-keyword">try</span> &#123;<br><br>                        System.out.println(<span class="hljs-string">&quot;method:&quot;</span> + objects);<br><br>                        transactionManager.begin();<br>                        invoke = method.invoke(accountService, objects);<br>                        transactionManager.commit();<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        transactionManager.rollBack();<br>                        e.printStackTrace();<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        transactionManager.close();<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> invoke;<br>                &#125;<br>            &#125;<br>    );<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="cglib"><a href="#cglib" class="headerlink" title="cglib"></a>cglib</h4><ul><li>create(Class type, Callback callback<ul><li>参数一: 被代理对象字节码</li><li>参数二: 具体增强原有方法</li></ul></li><li>MethodInterceptor 具体实现增强方法类</li><li>Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy)<ul><li> 参数一: 被创建出来的代理对象的引用</li><li> 参数二: 被代理对象所执行的方法</li><li> 参数三: 被代理对象参数</li><li> 参数四: 所要执行方法的代理对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Enhancer.create(accountService.getClass(), <span class="hljs-keyword">new</span> MethodInterceptor() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                Object invoke = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(objects);<br>                    transactionManager.begin();<br>                    invoke = method.invoke(accountService, objects);<br>                    transactionManager.commit();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    transactionManager.rollBack();<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    transactionManager.close();<br>                &#125;<br>                <span class="hljs-keyword">return</span> invoke;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><h3 id="xml-配置"><a href="#xml-配置" class="headerlink" title="xml 配置"></a>xml 配置</h3><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>连接点: 增强或未被增强的方法</p><p>切入点: 增强的方法位置</p><p>切面: 增强方法所在的类</p><p>通知: 具体增强方法</p><p>目标对象: 被代理对象</p><p>代理对象: 增强后的对象</p><p>织入: 增强方法应用到目标对象来创建新对象的过程</p><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>用于指定符合语法标准的连接点 进行增强</p><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p><strong>execution</strong> 用于匹配方法执行连接点</p><h4 id="切入点表达式-1"><a href="#切入点表达式-1" class="headerlink" title="切入点表达式"></a>切入点表达式</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">全限定方法</span>: <span class="hljs-string">访问修饰符.包.类名.方法名(参数列表)</span><br><span class="hljs-attr">public</span> <span class="hljs-string">void com.study.service.impl.AccountServiceImpl.save()</span><br><span class="hljs-meta">可以省略修饰符</span>:<span class="hljs-string"></span><br><span class="hljs-attr">void</span> <span class="hljs-string">com.study.service.impl.AccountServiceImpl.save()</span><br><span class="hljs-meta">*表示任意返回值</span>:<span class="hljs-string"></span><br><span class="hljs-meta">*</span> <span class="hljs-string">com.study.service.impl.AccountServiceImpl.save()</span><br><span class="hljs-meta">..</span> <span class="hljs-string">表示任意子包:</span><br><span class="hljs-attr">void</span> <span class="hljs-string">com.study.service..AccountServiceImpl.save()</span><br><span class="hljs-meta">类和方法名都可以使用*</span> <span class="hljs-string">表示任意类 任意方法</span><br><span class="hljs-attr">public</span> <span class="hljs-string">void com.study.service.impl.*.*()</span><br><span class="hljs-meta">参数列表</span> <span class="hljs-string">可以引用具体的参数 如 int java.lang.String</span><br><span class="hljs-meta">参数列表使用*</span> <span class="hljs-string">表示可以有任意参数 但是必须有参数</span><br><span class="hljs-attr">public</span> <span class="hljs-string">void com.study.service.impl.AccountServiceImpl.save(*)</span><br><span class="hljs-meta">参数使用..</span> <span class="hljs-string">表示有参无参都可以</span><br><span class="hljs-attr">public</span> <span class="hljs-string">void com.study.service.impl.AccountServiceImpl.save(..)</span><br><span class="hljs-meta">全通配符</span>: <span class="hljs-string">所有代码</span><br><span class="hljs-meta">*</span> <span class="hljs-string">*..*.*(..)</span><br></code></pre></td></tr></table></figure><h3 id="aop标签"><a href="#aop标签" class="headerlink" title="aop标签"></a>aop标签</h3><ul><li>aop:config 用于配置aop<ul><li>属性:<ul><li>proxy-target-class 代理方式 如果为true 使用cglib 默认为false<ul><li>expose-proxy: 是否暴露代理对象 如果是true 则表示可以被注入</li></ul></li></ul></li></ul></li><li>aop:aspect 用于配置切面<ul><li>id: 唯一标识</li><li>ref: 切面bean</li><li>order: 用于多个切面时，通知执行的顺序</li></ul></li><li>aop:pointcut 用于配置通配的切入点表达式</li><li>aop:aspectj_autoproxy<ul><li>proxy-target-class=”true” 配置代理方式</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.study.service.impl.AccountServiceImpl&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logUtil&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.study.utils.LogUtil&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logUtilAspect&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;logUtil&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;printLog&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(void com.study.service.impl.AccountServiceImpl.save())&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><h4 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>在业务方法前执行</p><p>属性:  method: 用于增强前置方法名称 pointcut-ref: 切入点 pointcut: 切入点表达式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;printLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLog</span><span class="hljs-params">(JoinPoint joinPoint)</span> </span>&#123;<br>    <span class="hljs-comment">// 获取切入点方法参数</span><br>    System.out.println(Arrays.toString(joinPoint.getArgs()));<br><br>    System.out.println(<span class="hljs-string">&quot;打印日志.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后置方法"><a href="#后置方法" class="headerlink" title="后置方法"></a>后置方法</h4><p>在业务方法之后执行 若切入点产生异常 后置方法不执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span>  /&gt;</span><br></code></pre></td></tr></table></figure><p>属性   method: 用于增强前置方法名称 pointcut-ref: 切入点 pointcut: 切入点表达式   returning:指定返回值参数</p><p>在方法中添加参数 参数注入为返回值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">returning</span>=<span class="hljs-string">&quot;returnValue&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;beforePrintLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span>  /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforePrintLog</span><span class="hljs-params">(Object returnValue)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;后置增强 打印日志.&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;返回值:&quot;</span> + returnValue);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="异常通知"><a href="#异常通知" class="headerlink" title="异常通知"></a>异常通知</h4><p>当抛出异常时 执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>属性:  method: 用于增强前置方法名称 pointcut-ref: 切入点 pointcut: 切入点表达式  throwing: 异常参数</p><p>在方法中添加抛出的异常参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;printExceptionLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span> <span class="hljs-attr">throwing</span>=<span class="hljs-string">&quot;e&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printExceptionLog</span><span class="hljs-params">(JoinPoint joinPoint, Exception e)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;异常增强 打印日志&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;异常:&quot;</span> + e);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最终通知"><a href="#最终通知" class="headerlink" title="最终通知"></a>最终通知</h4><p>在执行业务方法后 返回值之前时执行 无论是否产生异常 都会执行</p><p>属性:  method: 用于增强前置方法名称 pointcut-ref: 切入点 pointcut: 切入点表达式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>= <span class="hljs-string">/</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;aftPrintLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aftPrintLog</span><span class="hljs-params">(JoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;最终通知 打印日志&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h4><p>在业务代码前 业务代码后执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>属性:   method: 用于增强前置方法名称 pointcut-ref: 切入点 pointcut: 切入点表达式</p><ul><li><p>proceedingJoinPoint.proceed() 调用执行法规范</p></li><li><p>roceedingJoinPoint.getArgs() 获取方法参数</p></li><li><p>可以之间调用proceedingJoinPoint.proceed()  获取返回值</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;aroundPrintLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">aroundPrintLog</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>    <span class="hljs-comment">// 获取返回值</span><br>    Object proceed = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">// 获取参数</span><br>    proceedingJoinPoint.getArgs();<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;前置增强&quot;</span>);<br>        <span class="hljs-comment">// 执行方法</span><br>        proceed = proceedingJoinPoint.proceed(proceedingJoinPoint.getArgs());<br><br>        <span class="hljs-comment">// 打印返回值</span><br>        System.out.println(proceed);<br>        System.out.println(<span class="hljs-string">&quot;后置增强&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        System.out.println(<span class="hljs-string">&quot;环绕异常&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;最终增强&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> proceed;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解开发-1"><a href="#注解开发-1" class="headerlink" title="注解开发"></a>注解开发</h3><p>在类中添加@Aspect 注解</p><h4 id="在xml中开启Aop注解"><a href="#在xml中开启Aop注解" class="headerlink" title="在xml中开启Aop注解"></a>在xml中开启Aop注解</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="定义切入点"><a href="#定义切入点" class="headerlink" title="定义切入点"></a>定义切入点</h4><p>使用Pointcut注解value为切入点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(public * com.study.service..*.*(..))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pointcut</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前置增强"><a href="#前置增强" class="headerlink" title="前置增强"></a>前置增强</h4><p>Before注解 参数为切入点方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(value = &quot;pointcut()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLog</span><span class="hljs-params">(JoinPoint joinPoint)</span> </span>&#123;<br>    <span class="hljs-comment">// 获取切入点方法参数</span><br>    System.out.println(Arrays.toString(joinPoint.getArgs()));<br><br>    System.out.println(<span class="hljs-string">&quot;打印日志.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后置增强"><a href="#后置增强" class="headerlink" title="后置增强"></a>后置增强</h4><p>AfterReturning 注解 value为切入点方法 returnValue为方法参数也就是返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(value = &quot;pointcut()&quot;, returning = &quot;returnValue&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforePrintLog</span><span class="hljs-params">(Object returnValue)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;后置增强 打印日志.&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;返回值:&quot;</span> + returnValue);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="异常增强"><a href="#异常增强" class="headerlink" title="异常增强"></a>异常增强</h4><p>AfterThrowing注解 value为切入点方法 throwing为抛出的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@AfterThrowing(value = &quot;pointcut()&quot;, throwing = &quot;e&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printExceptionLog</span><span class="hljs-params">(JoinPoint joinPoint, Exception e)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;异常增强 打印日志&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;异常:&quot;</span> + e);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最终通知-1"><a href="#最终通知-1" class="headerlink" title="最终通知"></a>最终通知</h4><p>After注解 value为切入点方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@After(&quot;pointcut()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aftPrintLog</span><span class="hljs-params">(JoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;最终通知 打印日志&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="环绕通知-1"><a href="#环绕通知-1" class="headerlink" title="环绕通知"></a>环绕通知</h4><p>Around注解 参数为切入点方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(value = &quot;pointcut()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">aroundPrintLog</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>    <span class="hljs-comment">// 获取返回值</span><br>    Object proceed = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">// 获取参数</span><br>    proceedingJoinPoint.getArgs();<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;前置增强&quot;</span>);<br>        proceed = proceedingJoinPoint.proceed(proceedingJoinPoint.getArgs());<br><br>        <span class="hljs-comment">// 打印返回值</span><br>        System.out.println(proceed);<br>        System.out.println(<span class="hljs-string">&quot;后置增强&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        System.out.println(<span class="hljs-string">&quot;环绕异常&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;最终增强&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> proceed;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="纯注解开发"><a href="#纯注解开发" class="headerlink" title="纯注解开发"></a>纯注解开发</h3><p>只要在 configuration中添加@EnableAspectJAutoProxy注解 开启注解扫描 其余和普通注解开发相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@ComponentScan(&quot;com.study&quot;)</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AopConfig</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
